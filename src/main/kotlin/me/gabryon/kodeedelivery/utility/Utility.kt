package me.gabryon.kodeedelivery.utility

import godot.FileAccess
import godot.core.Quaternion
import godot.global.GD
import godot.global.GD.abs
import kotlin.experimental.ExperimentalTypeInference
import kotlin.reflect.KProperty

const val ABOUT_LINK = "https://github.com/gabryon99/kodee-delivery/blob/main/ABOUT.md"

/**
 * Adds two integers safely, ensuring no arithmetic overflow occurs.
 *
 * @param value The value to be added to this integer.
 * @return The sum of this integer and the given value. If an arithmetic overflow occurs, it returns Int.MAX_VALUE.
 */
infix fun Int.safeAdd(value: Int): Int = try {
    Math.addExact(this, value)
} catch (e: ArithmeticException) {
    Int.MAX_VALUE
}

/**
 * Calculates the value obtained by increasing the given number by a certain percentage.
 *
 * @param percentage The percentage by which the number should be increased. Typically, the number is between 1 and 100.
 * @return The value is obtained after increasing the number by the given percentage.
 */
infix fun Double.increasedByFactorOf(percentage: Double): Double = this * (1.0 + percentage / 100.0)

fun Quaternion.isAngleInRange(other: Quaternion, maxValue: Double, tolerance: Double = 1E-6): Boolean =
    abs(angleTo(other) - maxValue) <= tolerance

/**
 * Returns an infinite sequence generated by the given [block] function.
 *
 * @param block the block function to generate the sequence elements.
 * @return an infinite sequence.
 *
 * @param T the type of elements in the sequence.
 */
@OptIn(ExperimentalTypeInference::class)
fun <T> infiniteSequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence {
    iterator {
        while (true) block()
    }
}

/**
 * Provides access to a file specified by the given path using the specified modes.
 * The file resource is automatically closed.
 *
 * @param path The path of the file to access.
 * @param modes The modes to open the file with.
 * @param body The lambda expression to execute within the file context.
 * @return The result of executing the lambda expression on the file context, or null if an error occurred.
 */
inline fun <T> fileAccess(path: String, modes: FileAccess.ModeFlags, body: FileAccess.() -> T): T? {
    val file = FileAccess.open(path, modes)
    return try {
        file?.body()
    } finally {
        file?.close()
    }
}

fun debug(message: String) {
    GD.prints("[Debug] :: $message")
}

inline fun <T> debugLine(silent: Boolean = false, writer: DebugLineSession.() -> T): T {
    val session = DebugLineSession()
    return try {
        session.writer()
    } finally {
        if (!silent) session.debugLines()
    }
}

inline fun catchAndDebug(f: () -> Unit) {
    try {
        f()
    } catch (e: Exception) {
        GD.printErr(e.message)
        GD.printStack()
    }
}

class DebugLineSession {

    private val vars = mutableMapOf<String, Any?>()
    operator fun <T> T.getValue(nothing: Nothing?, property: KProperty<*>): T = this.dbg(property.name)
    private fun <T> T.dbg(name: String): T = this.also { vars[name] = this }

    @PublishedApi
    internal fun debugLines() {
        vars
            .entries
            .joinToString { (name, value) -> "$name=$value" }
            .also(::debug)
    }

    /**
     * Utility function to trigger the delegation getter.
     */
    fun hole(vararg a: Any?): Nothing? = null
}
